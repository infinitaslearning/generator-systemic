trigger:
- master

pr: none

pool:
  name: Hosted Ubuntu 1604

steps:
  - task: npmAuthenticate@0
    displayName: 'npm Authenticate .npmrc'
    inputs:
      workingFile: .npmrc

  - task: Docker@2
    displayName: 'docker: build image'
    inputs:
      containerRegistry: 'ACR Connection'
      repository: $(Build.Repository.Name)
      command: 'build'
      Dockerfile: '**/Dockerfile'
      tags: |
       $(Build.BuildId)
       latest
      arguments: '--build-arg NPM_TOKEN=$(NPM_TOKEN)'

  - bash: |
      ERROR_UP=$((docker-compose --file ./docker/cicd/docker-compose.yml up --force -d --build) 2>&1)
      sleep 10
      docker exec <%= name %> sh -c "npm run test:report" 2>&1
      docker cp <%= name %>:/usr/src/app/test-results.xml ./
      docker cp <%= name %>:/usr/src/app/coverage/lcov.info ./lcov.info
      sed -i 's|SF:/usr/src/app/|SF:|g' lcov.info

      echo "docker compose down"                                                   
      ERROR_DOWN=$((docker-compose --file ./docker/cicd/docker-compose.yml down) 2>&1)

      echo "ERROR_UP=$ERROR_UP"
      echo "ERROR_DOWN=$ERROR_DOWN"
    failOnStderr: true                        
    displayName: 'test: execute'

  - task: PublishTestResults@2
    displayName: 'test: publish report'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/test-*.xml'
      failTaskOnFailedTests: true

  - task: SonarQubePrepare@4
    displayName: 'sonarqube: prepare analysis'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      SonarQube: 'infinitas-sonarqube'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: <%= name %>
      cliProjectName: $(Build.Repository.Name)
      cliSources: '.'
      extraProperties: |
        sonar.sources=.
        sonar.exclusions=node_modules/**
        sonar.language=js
        sonar.projectVersion=$(Build.BuildNumber)
        sonar.javascript.lcov.reportPaths=lcov.info

  - task: SonarQubeAnalyze@4
    displayName: 'sonarqube: run analysis'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - task: SonarQubePublish@4
    displayName: 'sonarqube: publish analysis'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      pollingTimeoutSec: '300'

  - task: Docker@2
    displayName: 'docker: push image'
    inputs:
      containerRegistry: 'Docker Registry'
      repository:  $(Build.Repository.Name)
      Dockerfile: Dockerfile
      tags: |
       $(Build.BuildId)
       latest

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: .helm
